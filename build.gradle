//============ plugins and external jar dependencies ===================================================================
plugins {
    id "edu.sc.seis.macAppBundle" version "2.2.3"
    id "nebula.ospackage" version "5.0.4"
}

// java plugin configuration ========================
apply plugin: 'java'
compileJava.options.encoding = 'UTF-8'

// application plugin configuration ================
apply plugin: 'application'
mainClassName = 'HOLauncher'

repositories {
    jcenter()
}

//============  external jar dependencies ==========
dependencies {
    compile 'com.jgoodies:jgoodies-looks:2.7.0'
    compile 'com.toedter:jcalendar:1.4'
    compile 'org.scribe:scribe:1.3.0'
    compile 'org.hsqldb:hsqldb:2.4.1'
    compile 'junit:junit:4.12'
}


//============  variables ==============================================================================================

//naming
// Major.minor.Development_stage.Build
// Development_stage
// 0 for DEV status
// 1 for BETA status
// 2 for RELEASE status

def major = '1'
def minor = '436'
def development_stage = '0'
def releaseArtefacts = true

def versionPropsFile = file('version.properties')
Properties versionProps = new Properties()
versionProps.load(new FileInputStream(versionPropsFile))
def buildNumber = versionProps['buildNumber'].toInteger() + 1
buildNumber =  buildNumber.toString()
versionProps['buildNumber'] = buildNumber
versionProps.store(versionPropsFile.newWriter(), null)

version = major + '.' + minor + '.' + development_stage + '.' + buildNumber


ext {
    nsis_exe_path = "C:\\Program Files (x86)\\NSIS\\makensis.exe"
    nsis_confPath = "${projectDir}\\buildResources\\Win\\nsis"
    nsis_scriptName = "${nsis_confPath}\\makeWinInstaller.nsi"
    target_dir = "${buildDir}\\artefacts"
    osx_app_dir_sourcedir = "${projectDir}\\buildResources\\OSXapp"
}

//======================================================================================================================

// Configure tasks =====================================================================================================
// Configure jar task ================================
jar {
    archiveName = "HO.jar"
    manifest {
        attributes 'Manifest-Version': 1.0, 'Implementation-Title': 'HO', 'Implementation-Version': version,
                   'Main-Class': 'HOLauncher',
                    "Class-Path": configurations.compile.collect { it.getName() }.join(' ')
    }
}

// Configure distribution task =======================
distributions {
    main {
        baseName = 'XXX'
    }
}

// Configure macAppBundle task =======================
macAppBundle {
    mainClassName = "HOLauncher"
    icon = "${project.ext.osx_app_dir_sourcedir}\\source\\Hattrick Organizer.app\\Contents\\Resources\\HO.icns"
    bundleJRE = true
    javaProperties.put("apple.laf.useScreenMenuBar", "true")
    javaProperties.put("apple.awt.showGrowBox", "true")
    backgroundImage = "${project.ext.osx_app_dir_sourcedir}\\background\\Back_BETA.png"
}

// Configure ospackage and buildDeb tasks ============
ospackage {
        packageName = 'ho'
        os = LINUX // only applied to RPM
        packager 'aksolace'
        summary ' HattrickOrganizer! \n Manager tool for http://www.hattrick.org'
        license = 'LGPL'


    into '/usr'

    from(jar.outputs.files) {
        into 'lib\\ho'
    }
    from("${projectDir}\\src\\main\\resources\\sprache") {
        into 'lib\\ho\\sprache'
    }
    from("${projectDir}\\src\\main\\resources\\flags") {
        into 'lib\\ho\\flags'
    }
    from("${projectDir}\\src\\main\\resources\\prediction") {
        into 'lib\\ho\\prediction'
    }
    from("${projectDir}\\src\\main\\resources\\themes") {
        into 'lib\\ho\\themes'
    }

    from("${projectDir}\\src\\main\\resources") {
        include "**/*.jar"
        into "lib\\ho"
    }

    from("${projectDir}\\src\\main\\resources") {
        include "ho_logo.png"
        into "lib\\ho"
    }

    from("${projectDir}\\buildResources\\Linux\\ho.sh") {
        into 'bin'
        fileMode = 0755
    }

    from("${projectDir}\\buildResources\\Linux\\ho.desktop") {
        into 'share\\applications'
        fileMode = 0644
    }

    postInstall "chmod 777 /usr/lib/ho"

}

buildDeb {
        requires("openjdk-8-jre | openjdk-9-jre | openjdk-10-jre | openjdk-11-jre")
        link('/usr/bin/ho', '/usr/bin/ho.sh')
}

buildRpm {
    requires("jre-1.8.0-openjdk")
    link('/usr/bin/ho', '/usr/bin/ho.sh')
}

//======================================================================================================================

// ==========  my tasks ================================================================================================

import java.text.SimpleDateFormat

task makeAll(type: GradleBuild) {
    group 'ho'
    description 'Create ZipDistribution, Windows, MacOS and Linux binaries'
    tasks = ['init', 'installDist', 'AddResourcesInDistrib', 'makeWinInstaller', 'ZipDistribution', 'createApp',
             'AddResourcesAndZipMacApp', 'buildDeb', 'finishDeb', 'buildRpm', 'finishRpm', 'updatebuildreferences']
}

task updatebuildreferences(){
    doLast {
        if (releaseArtefacts)
        new File("$projectDir/docs/latest.html").text = """version=$version
released=${new SimpleDateFormat("dd.MM.yyyy").format(new Date())}
"""
        println("latest.html has been updated")
        if (development_stage==1) {
            new File("$projectDir/docs/latestbeta.html").text = """version=$version
released=${new SimpleDateFormat("dd.MM.yyyy").format(new Date())}
"""
            println("latestbeta.html has been updated")
        }
        if (development_stage==2) {
            new File("$projectDir/docs/lateststable.html").text = """version=$version
released=${new SimpleDateFormat("dd.MM.yyyy").format(new Date())}
"""
            println("lateststable.html has been updated")
        }
        else{
            println("artefacts not released, html files have not been updated !!")
        }
    }
}

task makeWindowsBinarary(type: GradleBuild) {
    group 'ho'
    description 'Create ZipDistribution and Windows binary'
    tasks = ['init', 'installDist', 'AddResourcesInDistrib', 'makeWinInstaller', 'ZipDistribution']
}

task init{
    group 'ho'
    description 'get HO Version'
    doLast {
        //     Deleting build project     ---------------------------------------------------------------------
        println("Deleting build project ....")
        project.delete(files("${buildDir}/"))
        println("Deleting ho build folder ....")
        project.delete(files("${projectDir}\\db"))
        project.delete(files("${projectDir}\\logs"))
        project.delete(files("${projectDir}\\themes"))
        project.delete(files("${projectDir}\\user.xml"))
        
        //     Creating Target directory ...  ---------------------------------------------------------------------
        println("creating directory for artefacts: ${target_dir}")
        mkdir project.ext.target_dir
    }
}

task AddResourcesInDistrib {
    group 'tool'
    dependsOn 'init', 'installDist'
    def distribDir = file("${buildDir}/install/XXX")
    doLast {
        println("adding resources folder")
        copy {
            from "${projectDir}\\src\\main\\resources\\changelog.txt"
            into distribDir
        }
        copy {
            from "${projectDir}\\src\\main\\resources\\sprache"
            into "${distribDir}\\sprache"
        }
        copy {
            from "${projectDir}\\src\\main\\resources\\gui"
            into "${distribDir}\\gui"
        }
        copy {
            from "${projectDir}\\src\\main\\resources\\flags"
            into "${distribDir}\\flags"
        }
        copy {
            from "${projectDir}\\src\\main\\resources\\prediction"
            into "${distribDir}\\prediction"
        }
        copy {
            from "${projectDir}\\buildResources\\Win\\HO.bat"
            into "${distribDir}"
        }
        copy {
            from "${projectDir}\\buildResources\\Linux\\ho.sh"
            into "${distribDir}"
            fileMode = 0755
        }

        copy {
            from "${distribDir}/lib"
            include "**/*.jar"
            into "${distribDir}"
        }
        copy {
            from "${projectDir}\\src\\main\\resources\\themes"
            into "${distribDir}\\themes"
        }
        delete "${distribDir}\\bin"
        delete "${distribDir}\\gui"
        delete "${distribDir}\\lib"
        delete "${distribDir}\\hamcrest-core-1.3.jar"
        delete "${distribDir}\\junit-4.12.jar"


        println("renaming distribution")
        copy {
            from("${distribDir}")
            into("${buildDir}/install/${project.version}")
        }
        delete "${distribDir}"

    }
}

task makeWinInstaller {
    description 'Create Win32-Installer using NSIS'

    doLast {
        println("Creating win32 installer at ${target_dir} using NSIS...")

        def DBUILDDIR = "${buildDir}\\install\\${project.version}"
        def DOUTFILE="${project.ext.target_dir}\\HO_${project.version}_Win32_Installer.exe"

//          print("-V2"+" "+"-NOCD"+" "+"-DBUILDDIR=${DBUILDDIR}"+" "+ "-DHOVERSION='${project.version}'"+" "+ "-DCONFPATH=${nsis_confPath}"+" "+ "-DOUTFILE='${DOUTFILE}'"+" "+ "${project.ext.nsis_scriptName}")
        exec {
            executable nsis_exe_path
            args "-V2", "-NOCD", "-DBUILDDIR=${DBUILDDIR}", "-DHOVERSION='${project.version}'", "-DCONFPATH=${nsis_confPath}", "-DOUTFILE='${DOUTFILE}'", "${project.ext.nsis_scriptName}"
        }

    }
}

task finishDeb{
    group 'tool'
    doLast {
        println("copy and rename deb package to artefacts folder")
        copy {
            from("${buildDir}/distributions")
            include("*.deb")
            into("${buildDir}/artefacts")
            rename { filename -> filename.replace('_all', '').replace('~','-')}
        }
    }
}

task finishRpm{
    group 'tool'
    doLast {
        println("copy and rename rpm package to artefacts folder")
        copy {
            from("${buildDir}/distributions")
            include("*.rpm")
            into("${buildDir}/artefacts")
            rename { filename -> filename.replace('.noarch', '').replace('~','-')}
            }
        }
    }


task ZipDistribution(type: Zip) {
    println("zipping distribution")
    archiveName = "HO_${project.version}.zip"
    destinationDir = file("${project.ext.target_dir}")
    from ("${buildDir}/install/${project.version}") {exclude("**\\ho.sh", "**\\HO.bat")}
    from ("${buildDir}/install/${project.version}") {
        include("**\\ho.sh")
        fileMode=0755 }
    }


task AddResourcesAndZipMacApp {
    dependsOn 'init', 'createApp'
    def macAppDir = "${buildDir}\\macApp\\HO.app\\Contents\\Java"
    doLast {
        println("adding resources folder")
        copy {
            from "${projectDir}\\src\\main\\resources\\changelog.txt"
            into "${buildDir}\\macApp"
        }

        delete "${macAppDir}\\hamcrest-core-1.3.jar"
        delete "${macAppDir}\\junit-4.12.jar"

        println("zipping MacApp distribution")
        task(ZipMacAppDistribution, type: Tar) {
            archiveName = "HO_${project.version}_OSX.zip"
            destinationDir = file("${project.ext.target_dir}")
            from ("${buildDir}\\macApp") {exclude("**\\JavaAppLauncher")}
            from ("${buildDir}\\macApp") {
                include("**\\JavaAppLauncher")
                fileMode=0755}
        }.execute()

    }

}

task createLanguageFileList()  {
    group 'tool'

    def lTranslationFiles = []
    fileTree(dir: "${projectDir}\\src\\main\\resources\\sprache", include: '**/*.properties').visit {
        FileVisitDetails details -> lTranslationFiles << details.file.name
    }

    doLast {
            lTranslationFiles = lTranslationFiles.collect { it.take(it.lastIndexOf('.'))}
            println lTranslationFiles
            File lstFile = new File("${projectDir}\\src\\main\\resources\\sprache\\ListLanguages.txt")
            lstFile.withWriter{ out -> lTranslationFiles.each {out.println it}
           }
    }

}